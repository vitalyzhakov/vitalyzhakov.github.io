<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Инфраструктура ИТ on Инфраструктура ИТ</title>
    <link>https://vitalyzhakov.github.io/</link>
    <description>Recent content in Инфраструктура ИТ on Инфраструктура ИТ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Схема CI/CD  для веб-разработчиков на основе open-source инструментов</title>
      <link>https://vitalyzhakov.github.io/post/ci-cd/</link>
      <pubDate>Sat, 24 Oct 2020 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/ci-cd/</guid>
      <description>

&lt;p&gt;Содержание&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Общая схема&lt;/li&gt;
&lt;li&gt;Сервер dev с песочницами&lt;/li&gt;
&lt;li&gt;Детализация разработки (создание ветки, непрерывный деплой и тестирование, создание merge на бота, апрув в master)&lt;/li&gt;
&lt;li&gt;Прод с master-master репликацией, graylog, sentry, prometheus.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Наверное, все видели стандартную восьмёрку, как выглядит CI/CD:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/ci-cd/8.png&#34; alt=&#34;Бесконечность CI/CD&#34; title=&#34;Бесконечность CI/CD&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Но обычно никто не рассказывает, как именно пошагово реализовать этот процесс.&lt;/p&gt;

&lt;p&gt;Сегодня детализирую этот процесс на примере разработки веб-сервисов.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/ci-cd/common-scheme.png&#34; alt=&#34;Общая схема&#34; title=&#34;Общая схема&#34; /&gt;&lt;/p&gt;

&lt;p&gt;На схеме мы видим, как параллельно сдаются задачи (в виде коммитов) в master-ветку.&lt;/p&gt;

&lt;p&gt;Далее принимается решение о релизе, он фиксируется, отправляется в &lt;em&gt;registry&lt;/em&gt; (магазин приложений),
с &lt;em&gt;registry&lt;/em&gt; готовое приложение попадает в прод.&lt;/p&gt;

&lt;p&gt;Далее поэтапно рассмотрим реализацию каждого шага.&lt;/p&gt;

&lt;p&gt;Сердцем всей истории у нас является Gitlab и Gitab-CI.&lt;/p&gt;

&lt;p&gt;Git flow показался нам слишком сложным.
&lt;a href=&#34;https://guides.github.com/introduction/flow/index.html&#34; target=&#34;_blank&#34;&gt;Github flow&lt;/a&gt; до слияния в master кидает изменения на пользователей (прод).
Не понятно, как распараллелить работу нескольких разработчиков.&lt;/p&gt;

&lt;p&gt;История с production/preproduction веткой в &lt;a href=&#34;https://docs.gitlab.com/ee/topics/gitlab_flow.html&#34; target=&#34;_blank&#34;&gt;Gitlab flow&lt;/a&gt; также кажется нам лишней, поэтому
предлагаем вам следующую схему.&lt;/p&gt;

&lt;h2 id=&#34;dev-сервер-с-песочницами-под-каждую-ветку&#34;&gt;Dev-сервер с песочницами под каждую ветку&lt;/h2&gt;

&lt;p&gt;Основная фишка - предоставление песочницы под задачу со всеми нужными контейнерами для разработки быстро (в идеале в течение 1-5 минут после запроса).&lt;/p&gt;

&lt;p&gt;При этом понятно, что железо стоит денег и старые песочницы ночью удаляются в автоматическом режиме.
Без этой операции при большом количестве параллельных задач можно погрязнуть в хаосе.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/ci-cd/devScheme.png&#34; alt=&#34;Схема работы dev-сервера&#34; title=&#34;Схема работы dev-сервера&#34; /&gt;.&lt;/p&gt;

&lt;p&gt;В исследованиях &lt;a href=&#34;https://services.google.com/fh/files/misc/state-of-devops-2019.pdf&#34; target=&#34;_blank&#34;&gt;State of DevOps 2019&lt;/a&gt;
и &lt;a href=&#34;https://express42.com/upload/reports/State-of-DevOps-Russia-2020.pdf&#34; target=&#34;_blank&#34;&gt;State of DevOps Russia 2020&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;выделяются 4 метрики производительности:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/ci-cd/dora-metrics.png&#34; alt=&#34;DevOps-метрики&#34; title=&#34;DevOps-метрики&#34; /&gt;.&lt;/p&gt;

&lt;p&gt;Более детально они измеряются и распределены так:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/ci-cd/dora-metrics.png&#34; alt=&#34;Распределение DevOps-метрик&#34; title=&#34;Распределение DevOps-метрик&#34; /&gt;.&lt;/p&gt;

&lt;p&gt;То есть&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;частоту релизов нужно повышать;&lt;/li&gt;
&lt;li&gt;время восстановления сервиса, время для внесения изменений, частоту ошибок нужно снижать;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Начнём с самого простого с точки зрения реализации, время восстановления сервиса.&lt;/p&gt;

&lt;h2 id=&#34;время-восстановления-сервиса&#34;&gt;Время восстановления сервиса&lt;/h2&gt;

&lt;p&gt;Каждый сервис во время деплоя регистрирует себя в &lt;code&gt;environment&lt;/code&gt; gitlab CI.&lt;/p&gt;

&lt;p&gt;Чтобы время восстановления было минимальным, в магазине приложений (registry)
сохраняется несколько предыдущих версий, помимо текущей.&lt;/p&gt;

&lt;p&gt;Поэтому время восстановления stateless-сервиса состоит из:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;нажатия кнопки в CI;&lt;/li&gt;
&lt;li&gt;скачивания образов с предыдущей версией из магазина приложений;&lt;/li&gt;
&lt;li&gt;их запуска.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В части случаев образ находится в кеше ноды и время скачивания в таком случае равно нулю.&lt;/p&gt;

&lt;p&gt;Используя один базовый образ на несколько сервисов, необходимость скачивания есть только для слоя приложения, что также снижает время восстановления.&lt;/p&gt;

&lt;p&gt;В любом случае при такой автоматизации восстановление stateless-приложения занимает не больше 5 минут,
что соответствует лучшим практикам.&lt;/p&gt;

&lt;h2 id=&#34;время-для-внесения-изменений&#34;&gt;Время для внесения изменений&lt;/h2&gt;

&lt;p&gt;Статический анализ и автотесты должны применяться первыми к ветке для обеспечения быстрой обратной связи сдающему.&lt;/p&gt;

&lt;p&gt;Если ваша команда достаточно большая, надеюсь, уже есть процесс code review.
Если ещё нет, рекомендую его завести как фактор снижения ошибок, повышения уровня совместного владения кодом и повышения уровня компетенций.
Правила review должны быть объективными и публичными.&lt;/p&gt;

&lt;p&gt;На шаге создания merge request можно применить бота, который будет раскидывать review по людям,
с учётом их часов работы и графика отпусков.
На шаге приёмки можно автоматизировать формальные проверки, если они присутствуют.&lt;/p&gt;

&lt;h2 id=&#34;частота-ошибок&#34;&gt;Частота ошибок&lt;/h2&gt;

&lt;p&gt;Здесь начинается самая интересная часть)&lt;/p&gt;

&lt;p&gt;Основной упор преобразований - сдвиг влево по первой картинке всех уровней контроля качества.&lt;/p&gt;

&lt;p&gt;Что нужно сдвинуть &amp;ldquo;влево&amp;rdquo;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;возможность в ветке проверить сервис целиком (включая функционально СУБД) &lt;a href=&#34;https://vitalyzhakov.github.io/posts/sandbox-for-web-developers&#34;&gt;песочницы для веб-разработчиков&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;идентичность теста и прода (для приложения могут использоваться docker-контейнеры, пронизывающие весь процесс - один и тот же контейнер развёртываем в фиче-ветке, в master, staging и prod-средах);&lt;/li&gt;
&lt;li&gt;статический анализ кода;&lt;/li&gt;
&lt;li&gt;тесты: от unit до приёмочных, нагрузочное тестирование;&lt;/li&gt;
&lt;li&gt;проверки безопасности.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Чем раньше мы видим ошибку, тем меньше убытков мы несём.
Ошибка не попала в прод - пользователи довольны, как следствие, отсутствует время восстановления.
Ошибка не попала в master - в другие ветки не попал код с ошибкой.&lt;/p&gt;

&lt;p&gt;Многие люди обосновывают отсутствие потребности в сдвиге влево трудозатратами, которые увеличиваются пропорционально количеству веток.
Это действительно так, если вы не используете автоматизацию грамотно.
Но это же не так?)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Устранение ошибок SQL запросов в режиме ONLY_FULL_GROUP_BY</title>
      <link>https://vitalyzhakov.github.io/post/mysql-only-full-group-by/</link>
      <pubDate>Wed, 16 Sep 2020 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/mysql-only-full-group-by/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;“Что случилось с моим приложением? Я установил новую версию MySQL. Запросы, что выполнялись на старой версии теперь падают с кучей ошибок.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Многие программисты сталкиваются с этим вопросом при обновлении до версий 5.7 или 8.
В этой статье мы рассмотрим один из самых частых кейсов и его решение.&lt;/p&gt;

&lt;p&gt;Мы говорим об этой ошибке&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP BY clause 
and contains nonaggregated column &#39;test.web_log.user_id&#39; which is not functionally 
dependent on columns in GROUP BY clause; this is incompatible 
with sql_mode=only_full_group_by
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Видели ли вы когда-либо её?&lt;/p&gt;

&lt;h2 id=&#34;sql-mode&#34;&gt;SQL_MODE&lt;/h2&gt;

&lt;p&gt;Для начала разрешите мне представить концепцию &lt;em&gt;SQL_MODE&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;MySQL может работать используя разные SQL режимы, которые влияют
на синтаксис запросов и валидацию.
В зависимости от установленного значения переменной sql_mode
запрос может быть валидным и выполняться или может получить
ошибку валидации и не может быть выполнен.&lt;/p&gt;

&lt;p&gt;Старейшие версии MySQL научили пользователей писать запросы, которые
семантически корректны, потому что разработаны для работы в “прощающем режиме”.
Пользователи могли писать любой синтаксически правильный запрос независимо от
соответствия SQL стандарту или сематических правил.&lt;/p&gt;

&lt;p&gt;Это была плохая привычка, которая была исправлена введением sql_mode, чтобы настроить MySQL
работать более строгим способом для проверки запросов.&lt;/p&gt;

&lt;p&gt;Некоторые пользователи не знают об этой функции, потому что значение по умолчанию не было таким строгим. Начиная с версии 5.7, значение по умолчанию является более строгим, и по этой причине у некоторых пользователей возникают проблемы с неожиданными ошибками запросов после перехода на 5.7 или 8.0.&lt;/p&gt;

&lt;p&gt;Переменная &lt;em&gt;sql_mode&lt;/em&gt; может быть установлена в файле конфигурации (/etc/my.cnf) или
может быть изменена во время выполнения.
Область действия переменной может быть GLOBAL или SESSION, поэтому может измениться
в соответствии с целью для любого отдельного соединения.&lt;/p&gt;

&lt;p&gt;Переменная sql_mode может иметь несколько значений, разделённых запятой, для настройки различных поведений.
Например, вы можете проинструктировать MySQL как обращаться с датами с нулями, как &lt;code&gt;0000-00-00&lt;/code&gt;,
чтобы дата считалась действительной или нет.&lt;/p&gt;

&lt;p&gt;В &amp;ldquo;прощающем режиме&amp;rdquo; (или если переменная sql_mode пуста), вы можете вставить такое значение без проблем.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;# установка sql в &amp;quot;прощающий режим&amp;quot; 
mysql&amp;gt; set session sql_mode=&#39;&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; create table t1( mydate date );
Query OK, 0 rows affected (0.05 sec)

mysql&amp;gt; insert into t1 values(&#39;0000-00-00&#39;);
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; select * from t1;
+------------+
| mydate     |
+------------+
| 0000-00-00 |
+------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Но это не правильное поведение, как заявлено в режиме TRADITIONAL.
Как хорошие программисты знают, что нужно проверять даты
в коде приложения, чтобы избежать некорректных данных или некорректных результатов.&lt;/p&gt;

&lt;p&gt;Далее мы показываем, как динамически проинструктировать MySQL вести себя в traditional режиме,
чтобы выбросить исключений вместо замалчивания ошибки:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;mysql&amp;gt; set session sql_mode=&#39;TRADITIONAL&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; insert into t1 values(&#39;0000-00-00&#39;);
ERROR 1292 (22007): Incorrect date value: &#39;0000-00-00&#39; for column &#39;mydate&#39; at row 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Существует множество режимов, которые вы можете использовать.
Покрытие всех режимов - не цель данной статьи, поэтому обратитесь
к &lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html&#34; target=&#34;_blank&#34;&gt;официальной документации&lt;/a&gt;
за подробностями и примерами.&lt;/p&gt;

&lt;h2 id=&#34;проблема-only-full-group-by&#34;&gt;Проблема ONLY_FULL_GROUP_BY&lt;/h2&gt;

&lt;p&gt;Давайте сосредоточимся на самом частом кейсе ошибок миграции с 5.7 на 8.0.
Как уже было сказано, в 5.7 более строгий режим, чем в 5.6, в 8.0 более строгий, чем в 5.7.&lt;/p&gt;

&lt;p&gt;Это работает, если вы обновляете MySQL, копируя старый файл my.cnf,
который не имеет специфичных настроек для переменной sql_mode. Итак, имейте в виду.&lt;/p&gt;

&lt;p&gt;Давайте создадим простую таблицу для хранения кликов на вебстраницах нашего сайта.
Мы будем записывать название страницы и ID зарегистрированного пользователя.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;mysql&amp;gt; create table web_log ( id int auto_increment primary key, page_url varchar(100), user_id int, ts timestamp);
Query OK, 0 rows affected (0.03 sec)

mysql&amp;gt; insert into web_log(page_url,user_id,ts) values(&#39;/index.html&#39;,1,&#39;2019-04-17 12:21:32&#39;),
    -&amp;gt; (&#39;/index.html&#39;,2,&#39;2019-04-17 12:21:35&#39;),(&#39;/news.php&#39;,1,&#39;2019-04-17 12:22:11&#39;),(&#39;/store_offers.php&#39;,3,&#39;2019-04-17 12:22:41&#39;),
    -&amp;gt; (&#39;/store_offers.php&#39;,2,&#39;2019-04-17 12:23:04&#39;),(&#39;/faq.html&#39;,1,&#39;2019-04-17 12:23:22&#39;),(&#39;/index.html&#39;,3,&#39;2019-04-17 12:32:25&#39;),
    -&amp;gt; (&#39;/news.php&#39;,2,&#39;2019-04-17 12:32:38&#39;);
Query OK, 7 rows affected (0.01 sec)
Records: 7  Duplicates: 0  Warnings: 0

mysql&amp;gt; select * from web_log;
+----+--------------------+---------+---------------------+
| id | page_url           | user_id | ts                  |
+----+--------------------+---------+---------------------+
|  1 | /index.html        |       1 | 2019-04-17 12:21:32 |
|  2 | /index.html        |       2 | 2019-04-17 12:21:35 |
|  3 | /news.php          |       1 | 2019-04-17 12:22:11 |
|  4 | /store_offers.php  |       3 | 2019-04-17 12:22:41 |
|  5 | /store_offers.html |       2 | 2019-04-17 12:23:04 |
|  6 | /faq.html          |       1 | 2019-04-17 12:23:22 |
|  7 | /index.html        |       3 | 2019-04-17 12:32:25 |
|  8 | /news.php          |       2 | 2019-04-17 12:32:38 |
+----+--------------------+---------+---------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Теперь мы хотим написать запрос для подсчёта наиболее посещаемых страниц сайта&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;mysql&amp;gt; set session sql_mode=&#39;&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; SELECT page_url, user_id, COUNT(*) AS visits
    -&amp;gt; FROM web_log
    -&amp;gt; GROUP BY page_url ORDER BY COUNT(*) DESC;
+-------------------+---------+--------+
| page_url          | user_id | visits |
+-------------------+---------+--------+
| /index.html       |       1 |      3 |
| /news.php         |       1 |      2 |
| /store_offers.php |       3 |      2 |
| /faq.html         |       1 |      1 |
+-------------------+---------+--------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Этот запрос работает, но на самом деле не корректен.
Легко понять, что page_url - столбик для группировки, значение, которое нас больше всего интересует
и мы хотим, чтобы оно было уникальным для подсчёта.
Также столбик visits понятен, это счётчик. Но как насчёт user_id?
Что представляет эта колонка?
Мы сгруппировали по page_url, поэтому значение, возвращаемое для user_id - только одно из значений в группе.
Фактически не только пользователь номер 1 посетил index.html, но также пользователи 2 и 3 посетили эту страницу.
Как нам интерпретировать значение? Это первый посетитель? Или последний?&lt;/p&gt;

&lt;p&gt;Мы не знаем правильного ответа!
Мы должны рассматривать значение колонки user_id как случайный элемент из группы.&lt;/p&gt;

&lt;p&gt;В любом случае, правильный ответ - запрос семантически некорректен,
так как нет смысла для возвращаемого значения столбика, что не является частью функции группировки.
Запрос будет недействительным в традиционном SQL.&lt;/p&gt;

&lt;p&gt;Давайте проверим это&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;mysql&amp;gt; SET SESSION sql_mode=&#39;ONLY_FULL_GROUP_BY&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; SELECT page_url, user_id, COUNT(*) AS visits 
    -&amp;gt; FROM web_log 
    -&amp;gt; GROUP BY page_url ORDER BY COUNT(*) DESC;
ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP BY clause 
and contains nonaggregated column &#39;test.web_log.user_id&#39; which is not functionally 
dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Как и ожидалось, у нас ошибка.&lt;/p&gt;

&lt;p&gt;Режим SQL &lt;em&gt;ONLY_FULL_GROUP_BY&lt;/em&gt; - это часть &lt;em&gt;TRADITIONAL&lt;/em&gt; режима и включен по умолчанию
начиная с 5.7.&lt;/p&gt;

&lt;p&gt;Множество программистов столкнулось с разновидностью этой ошибки после миграции на последнюю версию
MySQL.&lt;/p&gt;

&lt;p&gt;Теперь мы знаем, что вызывает эту ошибку, но наше приложение всё ещё не работает.
Какие возможные решения у нас есть, чтобы вернуть приложение к работе?&lt;/p&gt;

&lt;h2 id=&#34;решение-1-переписать-запрос&#34;&gt;Решение 1 - переписать запрос&lt;/h2&gt;

&lt;p&gt;Так как не корректно выбирать колонку, которая не является частью группировки,
мы можем переписать запрос без этой колонки. Очень просто.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;mysql&amp;gt; SELECT page_url, COUNT(*) AS visits
    -&amp;gt; FROM web_log
    -&amp;gt; GROUP BY page_url ORDER BY COUNT(*) DESC;
+-------------------+--------+
| page_url          | visits |
+-------------------+--------+
| /index.html       |      3 |
| /news.php         |      2 |
| /store_offers.php |      2 |
| /faq.html         |      1 |
+-------------------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Если много ваших запросов затронуты проблемой, вы можете потенциально сделать много работы,
чтобы найти и переписать их.
Или, возможно, проблемные запросы - часть старого приложения, которое нет возможности изменить.&lt;/p&gt;

&lt;p&gt;Но это решение заставляет вас писать правильные запросы и пусть конфигурация вашей базы данных
проверяет на такие ошибки в терминах SQL-валидации.&lt;/p&gt;

&lt;h2 id=&#34;решение-2-вернуть-прощающий-режим&#34;&gt;Решение 2 - вернуть &amp;ldquo;прощающий режим&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;Вы можете поменять конфигурацию подключения или MySQL сервера и вернуть &amp;ldquo;прощающий&amp;rdquo; режим.&lt;/p&gt;

&lt;p&gt;Или вы можете убрать только &lt;em&gt;ONLY_FULL_GROUP_BY&lt;/em&gt; из настроек по умолчанию.
По умолчанию SQL режим в 5.7 включает режимы: ONLY_FULL_GROUP_BY, STRINCT_TRANS_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO, NO_AUTO_CREATE_USER.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;#set the complete &amp;quot;forgiving&amp;quot; mode
mysql&amp;gt; SET GLOBAL sql_mode=&#39;&#39;;

# alternatively you can set sql mode to the following
mysql&amp;gt; SET GLOBAL sql_mode=&#39;STRICT_TRANS_TABLES,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,TRADITIONAL,NO_ENGINE_SUBSTITUTION&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для yii2-приложения конфиг может выглядеть так:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

return [
    &#39;class&#39; =&amp;gt; &#39;yii\db\Connection&#39;,
    &#39;dsn&#39; =&amp;gt; &#39;mysql:host=&#39; . getenv(&#39;MYSQL_HOST&#39;) . &#39;;port=&#39; . getenv(&#39;MYSQL_PORT&#39;) . &#39;;dbname=&#39; . getenv(&#39;MYSQL_DB&#39;),
    &#39;username&#39; =&amp;gt; getenv(&#39;MYSQL_USER&#39;),
    &#39;password&#39; =&amp;gt; getenv(&#39;MYSQL_PASSWORD&#39;),
    &#39;charset&#39; =&amp;gt; &#39;utf8&#39;,
    &#39;attributes&#39; =&amp;gt; [
        PDO::ATTR_PERSISTENT =&amp;gt; true,
        PDO::MYSQL_ATTR_INIT_COMMAND =&amp;gt; &#39;SET sql_mode=&amp;quot;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&amp;quot;&#39;
    ],
];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;решение-3-использование-агрегирующих-функций&#34;&gt;Решение 3 - использование агрегирующих функций&lt;/h2&gt;

&lt;p&gt;Если ваше приложение точно нуждается в получении поля user_id для какой-то корректной причины,
или слишком сложно менять исходный код (например, для поддержки обратной совместимости с внешними приложениями),
вы можете положиться на агрегирующие функции, чтобы избежать изменения SQL-режима.
Тогда для всех новых запросов проверка уже будет выполняться.&lt;/p&gt;

&lt;p&gt;Например мы можем использовать агрегирующие функции MAX(), MIN() или даже GROUP_CONCAT().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;mysql&amp;gt; SET SESSION sql_mode=&#39;ONLY_FULL_GROUP_BY&#39;;

mysql&amp;gt; SELECT page_url, MAX(user_id), COUNT(*) AS visits FROM web_log GROUP BY page_url ORDER BY COUNT(*) DESC;
+-------------------+--------------+--------+
| page_url          | MAX(user_id) | visits |
+-------------------+--------------+--------+
| /index.html       |            3 |      3 |
| /news.php         |            2 |      2 |
| /store_offers.php |            3 |      2 |
| /faq.html         |            1 |      1 |
+-------------------+--------------+--------+

mysql&amp;gt; SELECT page_url, GROUP_CONCAT(user_id), COUNT(*) AS visits FROM web_log GROUP BY page_url ORDER BY COUNT(*) DESC;
+-------------------+-----------------------+--------+
| page_url          | GROUP_CONCAT(user_id) | visits |
+-------------------+-----------------------+--------+
| /index.html       |                 1,2,3 |      3 |
| /news.php         |                   1,2 |      2 |
| /store_offers.php |                   3,2 |      2 |
| /faq.html         |                     1 |      1 |
+-------------------+-----------------------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL даже предоставляет специальную функцию для решения этой проблемы: ANY_VALUE().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;mysql&amp;gt; SELECT page_url, ANY_VALUE(user_id), COUNT(*) AS visits FROM web_log GROUP BY page_url ORDER BY COUNT(*) DESC;
+-------------------+--------------------+--------+
| page_url          | ANY_VALUE(user_id) | visits |
+-------------------+--------------------+--------+
| /index.html       |                  1 |      3 |
| /news.php         |                  1 |      2 |
| /store_offers.php |                  3 |      2 |
| /faq.html         |                  1 |      1 |
+-------------------+--------------------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;заключение&#34;&gt;Заключение&lt;/h2&gt;

&lt;p&gt;Лично я предпочитаю решение номер 1, так как оно заставляет вас писать запросы по стандарту SQL-92.
Следование стандартам часто считается лучшей практикой. Также хочу заметить, что это ловит часть ошибок,
аналогично статическому анализу кода.&lt;/p&gt;

&lt;p&gt;Решение 2 подходит, если вы не можете поменять код приложения или переписывание всех запросов
действительно очень сложное. Отличное решение исправить проблему за несколько секунд, хотя я настоятельно рекомендую иметь план по переписыванию запросов, которые соответствуют стандарту SQL-92.&lt;/p&gt;

&lt;p&gt;Больше деталей: &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html&#34; target=&#34;_blank&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;По мотивам
&lt;a href=&#34;https://www.percona.com/blog/2019/05/13/solve-query-failures-regarding-only_full_group_by-sql-mode/&#34; target=&#34;_blank&#34;&gt;https://www.percona.com/blog/2019/05/13/solve-query-failures-regarding-only_full_group_by-sql-mode/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cron в распределённой системе</title>
      <link>https://vitalyzhakov.github.io/post/cron-requirements/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/cron-requirements/</guid>
      <description>

&lt;p&gt;Cron-задания часто являются одной из составляющих долгоживущего сервиса.&lt;/p&gt;

&lt;p&gt;Могут применяться как сборщики мусора.
Или как инициаторы заданий для воркеров.&lt;/p&gt;

&lt;h2 id=&#34;проблематика&#34;&gt;Проблематика&lt;/h2&gt;

&lt;p&gt;В большой распределённой системе cron-задания могут быть не рассчитаны на параллельную работу.
Например, не реализовывать протокол &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%9F%D0%B0%D0%BA%D1%81%D0%BE%D1%81&#34; target=&#34;_blank&#34;&gt;Paxos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Поэтому требуется реализовать блокировку от параллельного выполнения.&lt;/p&gt;

&lt;p&gt;Но начнём мы с часто совершаемой ошибки при полном цикле разработки и эксплуатации в разных отделах&lt;/p&gt;

&lt;h2 id=&#34;cron-находится-в-отличном-от-кода-репо-настраивается-вручную-по-заявке&#34;&gt;cron находится в отличном от кода репо / настраивается вручную по заявке&lt;/h2&gt;

&lt;p&gt;Предположу, что есть варианты, когда срок горит, а разбираться в CI/DevOps практиках лень.&lt;/p&gt;

&lt;p&gt;Тогда долгосрочной эксплуатации продукта отдаётся меньший приоритет, чем быстрому запуску.&lt;/p&gt;

&lt;p&gt;Как следствие - cron настраивается инженерами экплуатации в системе, к которой программистам доступа нет.&lt;/p&gt;

&lt;p&gt;Для грамотной разработки и поддержки важно понимать, как работает проект сейчас (в общем случае в конкретный момент времени).&lt;/p&gt;

&lt;p&gt;А так как cron - часть проекта, его работа должна быть понятной для всех (разработчиков, эксплуатации и т.д.).&lt;/p&gt;

&lt;p&gt;Поэтому вывод&lt;/p&gt;

&lt;h2 id=&#34;cron-должен-быть-реализован-в-проекте&#34;&gt;Cron должен быть реализован в проекте&lt;/h2&gt;

&lt;p&gt;Основные агурменты за:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;конфигурация на виду у всех членов команды, а не записана в блокноте у уволенного сотрудника;&lt;/li&gt;
&lt;li&gt;имеется возможность протестировать и внести изменения вместе с изменениями проекта;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;реализация&#34;&gt;Реализация&lt;/h2&gt;

&lt;p&gt;Обычно вызов cron операций бывает:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;асинхронным вызовом через сеть (веб-сервер или другой сигнал для запуска команды);&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;этот путь не даёт контроля над результатом выполнения cron-операции;&lt;/li&gt;
&lt;li&gt;возможен, если это постановка задания в очередь, а не выполнение самого задания.&lt;/li&gt;
&lt;li&gt;можно воспользоваться готовым образом &lt;a href=&#34;https://hub.docker.com/r/renskiy/cron/&#34; target=&#34;_blank&#34;&gt;https://hub.docker.com/r/renskiy/cron/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;вызовом операции в самом приложении&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;контроль исполнения;&lt;/li&gt;
&lt;li&gt;контроль ресурсов;&lt;/li&gt;
&lt;li&gt;получаем точный код и трассировку в случае ошибки.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ограничения&#34;&gt;Ограничения&lt;/h2&gt;

&lt;p&gt;В распределённой системе нужно котролировать параллельный запуск, если возможны ошибки при параллельном выполнении двух cron-заданий.&lt;/p&gt;

&lt;h3 id=&#34;блокировка-от-параллельного-выполнения&#34;&gt;Блокировка от параллельного выполнения&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
PROCNUM=`ps xa | grep -v grep | grep -c &amp;quot;/srv/www/data/cron.php&amp;quot;`
# если процесс уже есть - выходим
if [ $PROCNUM -gt 0 ]; then exit; fi

/usr/local/bin/php /srv/www/data/cron.php
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;обработка-ошибок&#34;&gt;Обработка ошибок&lt;/h2&gt;

&lt;p&gt;Сообщения, которые затем должны быть видны в системе логирования, стоит записать в лог контейнера.
Система логирования автоматически их обработает и отдаст в удобном для клиента виде.&lt;/p&gt;

&lt;p&gt;Соответствует методике &lt;a href=&#34;https://12factor.net/ru/logs&#34; target=&#34;_blank&#34;&gt;12 факторов&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ошибка с пространственным полем point при миграции из mysql 5.1 до mysql 8</title>
      <link>https://vitalyzhakov.github.io/post/migration-from-mysql-51-to-mysql-8-geometry-field/</link>
      <pubDate>Wed, 05 Aug 2020 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/migration-from-mysql-51-to-mysql-8-geometry-field/</guid>
      <description>

&lt;h2 id=&#34;постановка-задачи&#34;&gt;Постановка задачи&lt;/h2&gt;

&lt;p&gt;Был сервис на mysql 5.1. Нужно мигрировать на актуальную 8ю версию.&lt;/p&gt;

&lt;p&gt;Заход с помощью mysql workbench не увенчался успехом, так как 5.1 уже давно не поддерживают.&lt;/p&gt;

&lt;p&gt;mysqldump справился с задачей снять дамп, но при выполнении его на целевом сервере появились ошибки:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Cannot get geometry object from data you send to the GEOMETRY field
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;диагностика&#34;&gt;Диагностика&lt;/h2&gt;

&lt;p&gt;Беглый поиск подводит к использованию mysqldump с ключом &lt;code&gt;--hex-blob&lt;/code&gt;, но к результату это не приводит.
Ошибка сохраняется.&lt;/p&gt;

&lt;p&gt;Экспорт дампа с ключами &lt;code&gt;--hex-blob --extended-insert=FALSE&lt;/code&gt; и последующий импорт даёт конкретную строку, в которой ошибка.
Просмотр дампа позволяет понять, что вместо геометрических данных mysqldump выгружает в пустых значениях &lt;code&gt;binary &#39;&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Импорт в mysql 8 версии преобразовать это поле в геометрию точки не может.&lt;/p&gt;

&lt;p&gt;Но такое поведение замечено только при пустом исходном значении. При заполненном импортируется корректно.&lt;/p&gt;

&lt;h2 id=&#34;решение&#34;&gt;Решение&lt;/h2&gt;

&lt;p&gt;Замена в файле дампа  &lt;code&gt;,binary &#39;&#39;,&lt;/code&gt; -&amp;gt; &lt;code&gt;,NULL,&lt;/code&gt; (например, с помощью mcedit).&lt;/p&gt;

&lt;p&gt;В моём случае также пришлось снять обязательность на поле &lt;code&gt;point&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VSCode for php</title>
      <link>https://vitalyzhakov.github.io/post/vscode-php/</link>
      <pubDate>Tue, 19 May 2020 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/vscode-php/</guid>
      <description>

&lt;h2 id=&#34;работа-с-git-по-ssh&#34;&gt;Работа с git по SSH&lt;/h2&gt;

&lt;p&gt;Приватный ключ может быть защищён паролем, поэтому на Linux-based системах
перед началом работы для использования такого ключа нужно воспользоваться командой&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-add ключ
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;рекомендуемые-расширения&#34;&gt;Рекомендуемые расширения&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client&#34; target=&#34;_blank&#34;&gt;vscode-intelephense-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker&#34; target=&#34;_blank&#34;&gt;code-spell-checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker-russian&#34; target=&#34;_blank&#34;&gt;code-spell-checker-russian&lt;/a&gt; После установки в readme spell checker russian написано, как добавить русский язык в проверку.&lt;/li&gt;
&lt;li&gt;GitLens&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&#34; target=&#34;_blank&#34;&gt;Remote development containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Вычисление размеров изделия с помощью степеней свободы FreeCAD</title>
      <link>https://vitalyzhakov.github.io/post/freecad-degree-of-freedom/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/freecad-degree-of-freedom/</guid>
      <description>&lt;p&gt;Недавно я столкнулся с простой бытовой потребностью - повесить полочки на стену.
Так как стена плоская, полка должна опираться на уголки.&lt;/p&gt;

&lt;p&gt;Вроде таких
&lt;img src=&#34;https://yunimag.ru/images/big/206362_1.jpg&#34; alt=&#34;Уголок&#34; /&gt;&lt;/p&gt;

&lt;p&gt;В магазине самые большие уголки длиной до 150 мм.&lt;/p&gt;

&lt;p&gt;Ширина полки меня бы устроила ~300 мм, длина ~2 метра.
Магазинный уголок, очевидно, не выдержит такую нагрузку.&lt;/p&gt;

&lt;p&gt;В режиме самоизоляции ходить по магазинам не очень удобно,
поэтому я решил немного прокачаться во FreeCAD и изготовить уголок самостоятельно.&lt;/p&gt;

&lt;p&gt;Для увеличения прочности изделия уголок будет состоять из трёх частей:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/freecad-degree-of-freedom/chernovik.png&#34; alt=&#34;Черновик будущего уголка&#34; title=&#34;Черновик&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Самое интересное - как посчитать, конкретные размеры, чтобы было красиво (но не подгонять их руками).&lt;/p&gt;

&lt;p&gt;Благодаря степеням свободы, мы можем задать только углы и равенство отрезков.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/freecad-degree-of-freedom/ugolok-no-freedom.png&#34; alt=&#34;Черновик будущего уголка&#34; title=&#34;Черновик&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Нам останется задать в терминах длины только 2 параметра:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ширину бруска;&lt;/li&gt;
&lt;li&gt;высоту бруска, прилегающего к стене.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Всё остально FreeCAD посчитает за нас!&lt;/p&gt;

&lt;p&gt;Например, при высоте вертикального бруска 350мм, горизонтальный будет длиной 270 мм.
Узнаём снова применением ограничения расстояния между точками либо длины по горизонтали/вертикали.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/freecad-degree-of-freedom/horizontal-length-270.png&#34; alt=&#34;Черновик будущего уголка&#34; title=&#34;Черновик&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://vitalyzhakov.github.io/images/freecad-degree-of-freedom/ugolok-2d.FCStd&#34;&gt;Скачать исходник&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Graylog</title>
      <link>https://vitalyzhakov.github.io/post/graylog/</link>
      <pubDate>Fri, 24 Apr 2020 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/graylog/</guid>
      <description>

&lt;p&gt;В нашей жизни происходят разные события.
Совсем разные.
Например, люди заболевают коронавирусом.&lt;/p&gt;

&lt;p&gt;Для различных прикладных задач важно знать,
когда, на какой территории сколько человек заболело,
чтобы своевременно действовать.&lt;/p&gt;

&lt;p&gt;Как это происходит с точки зрения процесса:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;больного записывают в журнал с указанием важных атрибутов (дата, время, диагноз, место проживания);&lt;/li&gt;
&lt;li&gt;данные передаются на центральный узел сбора;&lt;/li&gt;
&lt;li&gt;специалисты анализируют данные, делают выводы.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Наши сервисы также могут отсылать события в централизованную систему (graylog).
Пример события:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;наш веб-сервер обслуживает пользователя, отправляет время и длительность ответа;&lt;/li&gt;
&lt;li&gt;очередь обновлений: записывается категория задания, город и длительность.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;После того, как мы записали данные, в удобном интерфейсе можем делать анализ событий.&lt;/p&gt;

&lt;p&gt;Примеры:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;узнать нагрузку на сервис по минутам;&lt;/li&gt;
&lt;li&gt;узнать IP клиентов;&lt;/li&gt;
&lt;li&gt;посмотреть среднее или перцентиль времени ответа;&lt;/li&gt;
&lt;li&gt;узнать количество 500х.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;вопросы-и-ответы&#34;&gt;Вопросы и ответы&lt;/h2&gt;

&lt;h3 id=&#34;чем-graylog-отличается-от-google-analytics&#34;&gt;Чем graylog отличается от google analytics&lt;/h3&gt;

&lt;p&gt;Если посмотреть сверху, ничем. Обе системы анализируют поток событий.
Но google analytcs - специализированный инструмент, предназначенный для сбора метрик с браузера.
Для его работы требуется доступ в интернет.&lt;/p&gt;

&lt;p&gt;Благодаря тому, что инструмент специализированный,
в нём хорошо решается конкретная задача по сбору и обработке событий в браузере.&lt;/p&gt;

&lt;p&gt;В противоположность goolge analytics, graylog - инструмент универсальный.
Но эта гибкость лишает нас большого количества стандартных отчётов.&lt;/p&gt;

&lt;p&gt;С другой стороны при разработке сервиса лишь малая часть покрывается событиями из клиентского браузера.&lt;/p&gt;

&lt;p&gt;Поэтому стоит выбрать инструмент под задачу.&lt;/p&gt;

&lt;h3 id=&#34;другие-инструменты-например-elk-или-splunk&#34;&gt;Другие инструменты, например, ELK или splunk&lt;/h3&gt;

&lt;p&gt;Принцип работы у всех продуктов один и тот же, я же призываю вас поддержать open-source продукт.
Вы можете внести &lt;a href=&#34;https://github.com/Graylog2/graylog2-server&#34; target=&#34;_blank&#34;&gt;свой вклад&lt;/a&gt;
путём отправки ошибок в баг-трекер или оформлять документацию,
писать код или отвечать на вопросы пользователей.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Репликация MySQL-серверов с помощью Docker</title>
      <link>https://vitalyzhakov.github.io/post/mysql-replication-docker/</link>
      <pubDate>Fri, 10 Apr 2020 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/mysql-replication-docker/</guid>
      <description>

&lt;p&gt;До выхода приложения в бой, нужно смоделировать его поведение
&lt;a href=&#34;https://vitalyzhakov.github.io/post/sandbox-for-web-developers/&#34;&gt;в тестовой среде&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Технология Docker Swarm позволяет легко масштабировать приложение горизонтально.
Но часто приложению приходится обращаться к серверу баз данных, задача масшабировать который гораздо труднее.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/several-upstream-one-db.svg&#34; alt=&#34;Много приложений - одна база&#34; title=&#34;Много приложений - одна база&#34; /&gt;&lt;/p&gt;

&lt;p&gt;В нашем случае количество запросов на чтение информации гораздо меньше количества изменений
(есть подозрение, что так на большинстве веб-проектов).
Логичный способ увеличения такого бутылочного горлышка -
увеличить количество баз на чтение и настроить приложение таким образом,
чтобы большее количество запросов на чтение
отправлялось на SLAVE-сервера.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/several-upstream-several-dbs.svg&#34; alt=&#34;Много приложений - одна база&#34; title=&#34;Много приложений - много баз&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;предварительная-установка&#34;&gt;Предварительная установка&lt;/h2&gt;

&lt;p&gt;Установить docker, docker-compose на вашу операционную систему.&lt;/p&gt;

&lt;p&gt;Текст далее протестирован на&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 18.04&lt;/li&gt;
&lt;li&gt;docker 18.09&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/install/&#34; target=&#34;_blank&#34;&gt;docker-compose&lt;/a&gt; 1.25.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;проект&#34;&gt;Проект&lt;/h2&gt;

&lt;p&gt;Создадим папку, где будет располагаться конфигурация серверов&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir db-replication
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;и перейдём в неё&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd db-replication
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Дальнейшие действия будут производиться относительно папки с проектом.&lt;/p&gt;

&lt;h2 id=&#34;настройка-репликации&#34;&gt;Настройка репликации&lt;/h2&gt;

&lt;p&gt;Создадим папку для хранения конфигураций серверов mysql&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p build_env/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;изменение-в-my-cnf-для-каждого-сервера&#34;&gt;Изменение в my.cnf для каждого сервера&lt;/h3&gt;

&lt;p&gt;Каждый сервер должен иметь свой номер.
Master-сервер &lt;code&gt;server-id=1&lt;/code&gt;.
Slave-сервер &lt;code&gt;server-id&amp;gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Конфигурационный файл находится по адресу
&lt;code&gt;/etc/mysql/conf.d/my.cnf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Создадим файл конфигурации master-сервера&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano build_env/mysql/master.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;с содержимым&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
server-id=1
binlog_format=ROW
log-bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Конфигурация slave1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano build_env/mysql/slave1.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
server-id=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Конфигурация slave2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano build_env/mysql/slave2.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
server-id=3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;изменения-при-старте-сервера&#34;&gt;Изменения при старте сервера&lt;/h3&gt;

&lt;p&gt;На master-сервере нужно выдать права пользователю для чтения файла лога&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano build_env/mysql/master.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE USER repl@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;slavepass&#39;;
GRANT REPLICATION SLAVE ON *.* TO repl@&#39;%&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;На slave-сервере нужно указать координаты для подключения к master&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano build_env/mysql/slave.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CHANGE MASTER TO MASTER_HOST=&#39;db-master&#39;, MASTER_USER=&#39;repl&#39;, MASTER_PASSWORD=&#39;slavepass&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Создадим файл для docker-compose&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;с содержимым&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#39;3.7&#39;

services:
    mysql:
        image: &#39;percona:8.0&#39;
        container_name: db-master
        volumes:
            - ./build_env/mysql/master.cnf:/etc/my.cnf.d/repl.cnf
            - ./build_env/mysql/master.sql:/docker-entrypoint-initdb.d/start.sql
        environment:
            MYSQL_ROOT_PASSWORD: &amp;quot;secret&amp;quot;

    mysqlread1:
        image: &#39;percona:8.0&#39;
        container_name: db-slave1
        volumes:
            - ./build_env/mysql/slave1.cnf:/etc/my.cnf.d/repl.cnf
            - ./build_env/mysql/slave.sql:/docker-entrypoint-initdb.d/start.sql
        depends_on:
            - mysql
        environment:
            MYSQL_ROOT_PASSWORD: &amp;quot;secret&amp;quot;

    mysqlread2:
        image: &#39;percona:8.0&#39;
        container_name: db-slave2
        volumes:
            - ./build_env/mysql/slave2.cnf:/etc/my.cnf.d/repl.cnf
            - ./build_env/mysql/slave.sql:/docker-entrypoint-initdb.d/start.sql
        depends_on:
            - mysql
        environment:
            MYSQL_ROOT_PASSWORD: &amp;quot;secret&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;запуск&#34;&gt;Запуск&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose rm -vf &amp;amp;&amp;amp; docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;проверка&#34;&gt;Проверка&lt;/h2&gt;

&lt;p&gt;Открываем ещё 1 терминал, заходим в master-сервер&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it db-master mysql -uroot -psecret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;И ещё 1 терминал, заходим в любой slave&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it db-slave1 mysql -uroot -psecret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;На master выполняем&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Создадим на master базу данных &lt;code&gt;test&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create database test;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В подключении для slave проверяем, появилась ли созданная на master база данных:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;show databases;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В выводе должна появиться база данных &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| test               |
+--------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;диагностика&#34;&gt;Диагностика&lt;/h2&gt;

&lt;p&gt;Для диагностики нужно иметь возможность подключения к консоли mysql.
Подключаемся к master-серверу:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it db-master mysql -uroot -psecret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Смотрим статус&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show master status;
+-------------------+----------+--------------+------------------+
| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+-------------------+----------+--------------+------------------+
| mysqld-bin.000004 |   119471 |              |                  |
+-------------------+----------+--------------+------------------+
1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В процессах master-сервера мы можем видеть подключения со SLAVE-контейнеров, либо ошибки&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SHOW PROCESSLIST;  
+----+-----------------+------------------+------+-------------+------+---------------------------------------------------------------+------------------+-----------+---------------+
| Id | User            | Host             | db   | Command     | Time | State                                                         | Info             | Rows_sent | Rows_examined |
+----+-----------------+------------------+------+-------------+------+---------------------------------------------------------------+------------------+-----------+---------------+
|  4 | event_scheduler | localhost        | NULL | Daemon      |  234 | Waiting on empty queue                                        | NULL             |         0 |             0 |
|  8 | repl            | 172.18.0.4:57040 | NULL | Binlog Dump |  230 | Master has sent all binlog to slave; waiting for more updates | NULL             |         0 |             0 |
|  9 | repl            | 172.18.0.3:51798 | NULL | Binlog Dump |  228 | Master has sent all binlog to slave; waiting for more updates | NULL             |         0 |             0 |
| 10 | root            | localhost        | NULL | Query       |    0 | starting                                                      | SHOW PROCESSLIST |         0 |             0 |
+----+-----------------+------------------+------+-------------+------+---------------------------------------------------------------+------------------+-----------+---------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Для slave-сервера&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it db-slave1 mysql -uroot -psecret
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SHOW SLAVE STATUS;

| Slave_IO_State                   | Master_Host | Master_User | Master_Port | Connect_Retry | Master_Log_File         | Read_Master_Log_Pos | Relay_Log_File                | Relay_Log_Pos | Relay_Master_Log_File   | Slave_IO_Running | Slave_SQL_Running | Replicate_Do_DB | Replicate_Ignore_DB | Replicate_Do_Table | Replicate_Ignore_Table | Replicate_Wild_Do_Table | Replicate_Wild_Ignore_Table | Last_Errno | Last_Error | Skip_Counter | Exec_Master_Log_Pos | Relay_Log_Space | Until_Condition | Until_Log_File | Until_Log_Pos | Master_SSL_Allowed | Master_SSL_CA_File | Master_SSL_CA_Path | Master_SSL_Cert | Master_SSL_Cipher | Master_SSL_Key | Seconds_Behind_Master | Master_SSL_Verify_Server_Cert | Last_IO_Errno | Last_IO_Error | Last_SQL_Errno | Last_SQL_Error | Replicate_Ignore_Server_Ids | Master_Server_Id | Master_UUID                          | Master_Info_File        | SQL_Delay | SQL_Remaining_Delay | Slave_SQL_Running_State                                | Master_Retry_Count | Master_Bind | Last_IO_Error_Timestamp | Last_SQL_Error_Timestamp | Master_SSL_Crl | Master_SSL_Crlpath | Retrieved_Gtid_Set | Executed_Gtid_Set | Auto_Position | Replicate_Rewrite_DB | Channel_Name | Master_TLS_Version | Master_public_key_path | Get_master_public_key | Network_Namespace |

| Waiting for master to send event | db-master   | repl        |        3306 |            60 | 07a9adad7189-bin.000003 |                 155 | 0c53f622dac3-relay-bin.000005 |           383 | 07a9adad7189-bin.000003 | Yes              | Yes               |                 |                     |                    |                        |                         |                             |          0 |            |            0 |                 155 |         2955798 | None            |                |             0 | No                 |                    |                    |                 |                   |                |                     0 | No                            |             0 |               |              0 |                |                             |                1 | b9bb3878-7c11-11ea-9d4d-0242ac120002 | mysql.slave_master_info |         0 |                NULL | Slave has read all relay log; waiting for more updates |              86400 |             |                         |                          |                |                    |                    |                   |             0 |                      |              |                    |                        |                     0 |                   |

1 row in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Оптимизация скорости загрузки</title>
      <link>https://vitalyzhakov.github.io/post/page-load-time-optimizing/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/page-load-time-optimizing/</guid>
      <description>

&lt;h2 id=&#34;шаг-1-постановка-цели&#34;&gt;Шаг 1. Постановка цели&lt;/h2&gt;

&lt;p&gt;Основное на этом шаге - определиться, зачем вам оптимизировать
скорость загрузки.
К примеру, у вас сайт-визитка, продаёте вы бани под ключ.
Продажи происходят в той же бане, за столом или по телефону.&lt;/p&gt;

&lt;p&gt;Вполне возможно, что очередная секунда времени загрузки не влияет на продажи и
вложенные затраты не окупятся.&lt;/p&gt;

&lt;p&gt;Стоит сфокусироваться на тех сайтах или страницах, которые влияют на ваши целевые показатели.&lt;/p&gt;

&lt;h2 id=&#34;шаг-2-сбор-статистики-и-выбор-узкого-места-для-оптимизации&#34;&gt;Шаг 2. Сбор статистики и выбор узкого места для оптимизации&lt;/h2&gt;

&lt;p&gt;Во-первых, обратимся к событиям, вызываевым на разных
&lt;a href=&#34;https://www.w3.org/TR/navigation-timing/&#34; target=&#34;_blank&#34;&gt;стадиях загрузки страницы&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.w3.org/TR/navigation-timing/timing-overview.png&#34; alt=&#34;Диаграмма времени загрузки&#34; title=&#34;Диаграмма времени загрузки&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Современные браузеры поддерживают &lt;a href=&#34;https://caniuse.com/#feat=nav-timing&#34; target=&#34;_blank&#34;&gt;Navigation Timing API&lt;/a&gt;,
который предоставляет информацию, когда произошло конкретное событие в течение загрузки страницы.&lt;/p&gt;

&lt;p&gt;Метрики можно смотреть на локальном компьютере либо собирать их с клиента на сервер и затем делать выводы.
У обоих подходов есть плюсы и минусы, давайте их рассмотрим.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Фактор сравнения&lt;/th&gt;
&lt;th&gt;Отслеживание на локальном компьютере&lt;/th&gt;
&lt;th&gt;Развёртывание сервера и выводы в дальшейнем&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Порог входа&lt;/td&gt;
&lt;td&gt;Не требует установки дополнительного ПО&lt;/td&gt;
&lt;td&gt;Требует сервера приёма метрик и их анализа&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Реальность значений&lt;/td&gt;
&lt;td&gt;Только модель, нет конкретных значений&lt;/td&gt;
&lt;td&gt;Данные собраны с реальных пользователей&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Точность результатов&lt;/td&gt;
&lt;td&gt;Результаты меняются от измерения к измерению&lt;/td&gt;
&lt;td&gt;Чем больше посещений страниц, тем точнее результат&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Возможно применение сервисов, которые позволят собрать реальные данные,
не тратя время на равёртывание сервиса сбора метрик.
Например, &lt;code&gt;google analytics&lt;/code&gt; и её отчёт по скорости.&lt;/p&gt;

&lt;p&gt;Субьективно все инструменты делятся на 4 типа:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;встроенные в браузер (debug панель FireFox, Chrome);&lt;/li&gt;
&lt;li&gt;одноразовые сервисы - одно измерение, не отражающее действительность в силу их &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B0%D1%82%D0%B8%D1%81%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B7%D0%BD%D0%B0%D1%87%D0%B8%D0%BC%D0%BE%D1%81%D1%82%D1%8C&#34; target=&#34;_blank&#34;&gt;статической незначимости&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;скрипты сбора статистики, встроенные в счётики (Яндекс Метрика, Google Analytics);&lt;/li&gt;
&lt;li&gt;управляемый сбор статистики путём имитации клиента &lt;a href=&#34;https://vitalyzhakov.github.io/post/sitespeed/&#34;&gt;sitespeed.io&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Например, &lt;code&gt;google analytics&lt;/code&gt; по умолчанию собираются метрики по времени загрузки с 1% пользователей.&lt;/p&gt;

&lt;p&gt;При большом количестве просмотров страниц метрики начинают показывать стабильные результаты.&lt;/p&gt;

&lt;p&gt;Но как их улучшить?&lt;/p&gt;

&lt;h2 id=&#34;шаг-3-выявление-узкого-места&#34;&gt;Шаг 3. Выявление узкого места&lt;/h2&gt;

&lt;p&gt;В оптимизации важно применить усилие в нужное место.&lt;/p&gt;

&lt;h3 id=&#34;вариант-за-дёшево&#34;&gt;Вариант &amp;ldquo;за дёшево&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;Заходим в Chromium, запускаем вкладку Audits&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/page-load-time-optimizing/chromium-new-audit.png&#34; alt=&#34;Запуск Audit в Chromium&#34; title=&#34;Запуск Audit в Chromium&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Через несколько секунд получаем результат&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/page-load-time-optimizing/chromium-audit-result.png&#34; alt=&#34;Результат Audit в Chromium&#34; title=&#34;Результат Audit в Chromium&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Lighthouse, встроенный в инструменты разработчика Chromium,
отсортировал для нас факторы оптимизации в порядке приносимых эффектов.&lt;/p&gt;

&lt;p&gt;В данном примере рекомендуют минимизировать работу в главном потоке путём минимизации выполнения JS.&lt;/p&gt;

&lt;h3 id=&#34;вариант-по-статистическим-данным&#34;&gt;Вариант &amp;ldquo;по статистическим данным&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;В &lt;code&gt;google analytics&lt;/code&gt; находим отчёт по скорости загрузки страниц.&lt;/p&gt;

&lt;p&gt;Для наглядности на основе данных я построил диаграмму
&lt;img src=&#34;https://vitalyzhakov.github.io/images/page-load-time-optimizing/timings-from-ga.png&#34; alt=&#34;Page timings&#34; title=&#34;Page timings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Видно, что узкое место - время ответа сервера.
На втором месте - переадресация.&lt;/p&gt;

&lt;p&gt;В таком же порядке стоит начать оптимизировать. Сначала время ответа сервера, затем - уменьшение переадресаций.&lt;/p&gt;

&lt;h2 id=&#34;шаг-4-сама-оптимизация&#34;&gt;Шаг 4. Сама оптимизация&lt;/h2&gt;

&lt;p&gt;В зависимости от узкого места оптимизировать его ;)&lt;/p&gt;

&lt;p&gt;Общие рекомендации для бек-енда:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cчитать данные заранее, клиенту в момент запроса отдавать сразу поготовленные данные;&lt;/li&gt;
&lt;li&gt;Быть гибким для клиента и выдавать только запрошенные поля / выдавать подготовленные данные, подходящие именно для конкретной страницы;&lt;/li&gt;
&lt;li&gt;Стремиться отдавать 90% ответов клиенту за 100ms;&lt;/li&gt;
&lt;li&gt;Исходя из требований времени ответа не допускать запросов при формировании ответов, находящихся на расстоянии больше чем 40-50ms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Общие &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/rendering-tools&#34; target=&#34;_blank&#34;&gt;рекомендации для фронт-енда&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Не пишите JavaScript, который заставляет браузер пересчитывать макет страницы.&lt;/li&gt;
&lt;li&gt;Не усложняйте свой CSS. Используйте меньше CSS и делайте ваши CSS-селекторы простыми.&lt;/li&gt;
&lt;li&gt;Исключайте перерисовку где только возможно. Выбирайте CSS, которые не вызывают пересчёт макета страницы целиком.&lt;/li&gt;
&lt;li&gt;Отрисовка страницы может занять больше времени, чем любая другая активность при рендеринге. Следите за узкими местами отрисовки.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/speed/get-started&#34; target=&#34;_blank&#34;&gt;Оптимизация блога кота Тони&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Почему мы не можем повлиять на чужие сайты</title>
      <link>https://vitalyzhakov.github.io/post/why-you-not-influence-aliens-site/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/why-you-not-influence-aliens-site/</guid>
      <description>

&lt;p&gt;Есть различные ресурсы, которые (якобы) выдают некие рекомендации по скорости загрузки страницы конкретного сайта.
Далее будем называть его оптимизируемый сайт.&lt;/p&gt;

&lt;p&gt;Рассмотрим рекомендацию для сайта известного федерального провайдера perm.domru.ru&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/why-you-not-influence-alience-site/pagespeed-recomedations.png&#34; alt=&#34;Рекомендации pagespeed&#34; title=&#34;Рекомендации pagespeed&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Время жизни кеша задаётся в заголовках http-ответа. Рекомендация состоит в том, чтобы их изменить.&lt;/p&gt;

&lt;p&gt;Как считаете, где надо менять?&lt;/p&gt;

&lt;p&gt;Но пока не отвечайте =)&lt;/p&gt;

&lt;h2 id=&#34;цикл-запроса&#34;&gt;Цикл запроса&lt;/h2&gt;

&lt;p&gt;Рассмотрим последовательность до конкретного ответа.&lt;/p&gt;

&lt;p&gt;Браузер как http-клиент посылает запрос на доменное имя facebook.com&lt;/p&gt;

&lt;p&gt;Компьютеры внутри сети общаются по IP адресам.&lt;/p&gt;

&lt;p&gt;У каждого устройства, подключенного к сети, есть такой адрес.&lt;/p&gt;

&lt;p&gt;DNS-зоны распределяются международными организациями, например, ICANN.&lt;/p&gt;

&lt;p&gt;Внутри зон коммерческим компаниям и физ. лицам разрешается приобрести доменное имя
на определённый срок (обычно, год).&lt;/p&gt;

&lt;p&gt;Затем хозяин домена выставляет IP адрес, который будет выдан DNS-сервером при запросе.&lt;/p&gt;

&lt;p&gt;Чтобы по человекочитаемому (доменному) имени получить IP,
клиентскому устройству нужно сделать запрос к серверу DNS,
который хранит условную таблицу соответствий
между доменным именем и IP адресом.&lt;/p&gt;

&lt;p&gt;Ваше устройство производит запрос к DNS-серверу, далее
запрос уходит по целевому IP адресу, на другом конце сети этот запрос
слушает веб-сервер.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/why-you-not-influence-alience-site/dns-and-web.jpg&#34; alt=&#34;Схема обработки запросов в сети Интернет&#34; title=&#34;Схема обработки запросов в сети Интернет&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Веб-сервер выполняет заранее запрограммированные в нём действия, отдавая http-ответ,
включая тело ответа и заголовки.&lt;/p&gt;

&lt;h2 id=&#34;проверь-себя&#34;&gt;Проверь себя&lt;/h2&gt;

&lt;p&gt;Коллеги на веб-сервере оптимизируемого сайта задали конфигурацию:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vitalyzhakov.github.io/images/why-you-not-influence-alience-site/nginx-config.png&#34; alt=&#34;Конфигурация nginx&#34; title=&#34;Конфигурация nginx&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Как вы думаете, будет ли она работать?&lt;/p&gt;

&lt;p&gt;PS. Правильный ответ - нет, запросы на оптимизируемый сайт не придут.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Мониторинг</title>
      <link>https://vitalyzhakov.github.io/post/monitoring/</link>
      <pubDate>Tue, 01 Oct 2019 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/monitoring/</guid>
      <description>&lt;p&gt;При растущем проекте количество часто сервисов также растёт.&lt;/p&gt;

&lt;p&gt;Команда вносит в них изменения, но не все изменения удаётся протестировать.&lt;/p&gt;

&lt;p&gt;Иногда ошибка проникает в продуктовую среду и по ней нужно отреагировать.&lt;/p&gt;

&lt;p&gt;Один из способов отслеживания - сбор метрик и своевременная реакция на них.
Представьте, что перед вами стоит задача обеспечения здоровья жителей города.
Возможно, стоит периодически измерять показатели здоровья каждого жителя
(температуру, давление, уровень сахара в крови), чтобы своевременно реагировать на изменения и
предотвращать нежелательные последствия.&lt;/p&gt;

&lt;p&gt;Аналогично у команды в продакшне есть сервисы, у них свои показатели на конкретный момент времени.
Для сбора метрик в течение определённого времени используется time series db (например, prometheus).&lt;/p&gt;

&lt;p&gt;В предлагаемом решении в сборе участвуют cadvisior, данные собираются в prometheus.&lt;/p&gt;

&lt;p&gt;Для отображения установлена grafana, в которой можно смотреть показатели во времени.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Прогрессивное развёртывание</title>
      <link>https://vitalyzhakov.github.io/post/progressive-delivery/</link>
      <pubDate>Mon, 30 Sep 2019 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/progressive-delivery/</guid>
      <description>

&lt;h2 id=&#34;проблематика&#34;&gt;Проблематика&lt;/h2&gt;

&lt;p&gt;В крупные проекты вносится много (больше 10) изменений в день.&lt;/p&gt;

&lt;p&gt;С целью минимизации рисков можно вносить изменения на небольшие группы пользователей,
постепенно увеличивая долю пользователей с новой версией в зависимости от успешности / не успешности метрик.&lt;/p&gt;

&lt;h2 id=&#34;метрики&#34;&gt;Метрики&lt;/h2&gt;

&lt;p&gt;Как видно из постановки проблемы, успешность зависит от нескольких факторов:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;длительность принятия решения;&lt;/li&gt;
&lt;li&gt;вероятность принятия неправильного решения;&lt;/li&gt;
&lt;li&gt;количество изменений в единицу времени.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Выводы делаются на основе собираемых данных с сервисов (в идеале технических и бизнес-метрик).&lt;/p&gt;

&lt;h2 id=&#34;реализация&#34;&gt;Реализация&lt;/h2&gt;

&lt;p&gt;Пример в istio &lt;a href=&#34;https://docs.flagger.app/usage/progressive-delivery&#34; target=&#34;_blank&#34;&gt;https://docs.flagger.app/usage/progressive-delivery&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Оптимизация обращений к базе данных</title>
      <link>https://vitalyzhakov.github.io/post/db-optimization/</link>
      <pubDate>Thu, 19 Sep 2019 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/db-optimization/</guid>
      <description>

&lt;p&gt;При разборе времени генерации ответа от сервера иногда узким местом может быть обращение к СУБД.
Оптимизацию времени доступа к СУБД можно разделить на несколько видов:&lt;/p&gt;

&lt;h2 id=&#34;использование-параметризованных-запросов&#34;&gt;Использование параметризованных запросов&lt;/h2&gt;

&lt;p&gt;Некоторые программисты совершают ошибку, вписывая параметры (например, идентификаторы) запроса сразу в запрос.
Первым шагом СУБД пытается проанализировать запрос. Если параметры приходят в запросе, в кеш запрос не складывается.
Но если параметры прикладывать к запросу, структура запроса не меняется.
Значит, при следующем запросе, есть вероятность нахождения проанализированной структуры в кеше, что позволит ускорить выполнение.&lt;/p&gt;

&lt;h2 id=&#34;размещение-приложения-ближе-к-субд&#34;&gt;Размещение приложения &amp;ldquo;ближе&amp;rdquo; к СУБД&lt;/h2&gt;

&lt;p&gt;Улучшение сетевой связности может положительно сказаться на производительности приложения в целом,
при этом вам не обязательно вносить изменения в код.&lt;/p&gt;

&lt;h2 id=&#34;использование-постоянных-соединений&#34;&gt;Использование постоянных соединений&lt;/h2&gt;

&lt;p&gt;Обычно поднятие соединений занимает значительное количество ресурсов СУБД.
Для исполнения одних и тех же запросов не обязательно поднимать каждый раз новое соединение, можно переиспользовать.
Например, в php это можно сделать одним атрибутом соединения &lt;a href=&#34;https://www.php.net/manual/ru/features.persistent-connections.php&#34; target=&#34;_blank&#34;&gt;https://www.php.net/manual/ru/features.persistent-connections.php&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;написание-хранимых-процедур&#34;&gt;Написание хранимых процедур&lt;/h2&gt;

&lt;p&gt;Порог входа для написания хранимых процедур достаточно высок.
Но если проект высоко нагружен и все остальные способы оптимизации вы уже перебрали, стоит попробовать.&lt;/p&gt;

&lt;p&gt;Несколько запросов, зависящих друг от друга, можно объединить таким способом и
снизить затраты на сетевой обмен между сервером приложений и сервером баз данных.&lt;/p&gt;

&lt;h2 id=&#34;оптимизация-запросов-и-расстановка-индексов&#34;&gt;Оптимизация запросов и расстановка индексов&lt;/h2&gt;

&lt;p&gt;Здесь подразумевается использование инструментов &lt;code&gt;MySQL SLOW LOG&lt;/code&gt;, &lt;code&gt;explain&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;убираем-лишние-таблицы-данные-из-запросов&#34;&gt;Убираем лишние таблицы / данные из запросов&lt;/h3&gt;

&lt;p&gt;Стоит свежим взглядом осмотреть запросы не предмет неиспользуемых таблиц/полей в запросах.
Это может дать значительный эффект в проект, в который частно вносятся изменения, но при этом рефакторинга
&amp;ldquo;на свежую голову&amp;rdquo; давно не было.&lt;/p&gt;

&lt;h3 id=&#34;расстановка-индексов&#34;&gt;Расстановка индексов&lt;/h3&gt;

&lt;p&gt;Индексы добавляют размера базе данных, но позволяют ускорить запросы.
Стоит поискать баланс с помощью &lt;code&gt;EXPLAIN&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;денормализация-и-объединение-запросов&#34;&gt;Денормализация и объединение запросов&lt;/h2&gt;

&lt;p&gt;Этот вариант требует значительных затрат и модификации.
В большинстве систем данные нормализованы для поддержания целостности.
Но с точки зрения оптимизации времени выборка из одной таблицы обходится дешевле, чем связка нескольких и выборка из связки.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Автоматическое тестирование</title>
      <link>https://vitalyzhakov.github.io/post/autotesting/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/autotesting/</guid>
      <description>

&lt;p&gt;На хорошем производстве существует входной и выходной контроль.
Наверное, многие видели на технически сложных изделиях отметки &lt;em&gt;ОТК&lt;/em&gt;, &lt;em&gt;PASSED&lt;/em&gt;,
&lt;em&gt;QUALITY CHECK PASSED&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Приложение, упакованное в контейнер, тоже является технически сложным изделием.
До развёртывания в боевой среде стоит смоделировать его поведение и протестировать.&lt;/p&gt;

&lt;p&gt;Протестировать можно несколькими вариантами:
* отдать заказчику;
* проверить самому;
* написать карточку тестирования;
* написать автоматический тест.&lt;/p&gt;

&lt;p&gt;Рассмотрим задачу публикации предварительно подготовленной промо-страницы в сети Интернет.
Стандартная промо-страница состоит из картинок и текста с относительно неплохим дизайном.
Что на этой странице можно проверять?
* код ответа веб-сервера;
* заголовки ответа веб-сервера;
* текст на наличие ошибок;
* оформление;
* анимацию;
* и т.д.&lt;/p&gt;

&lt;p&gt;Каждый ручной тест отнимает самый дорогой наш ресурс - время.
Допустим, вы реализовали задачу по размещению внутри контейнера этой страницы.
Как другим участникам процесса убедиться в том, что вы сделали то, что было нужно?&lt;/p&gt;

&lt;p&gt;Можно сделать это вручную. А именно - содержать в электронной таблице, в базе знаний,
документах список сценариев и каждый раз их проходить. Вручную.&lt;/p&gt;

&lt;p&gt;Сомневаюсь, что найдутся 100% прилежные люди, которые в состоянии полностью пройти все сценарии (если сценариев больше 100).&lt;/p&gt;

&lt;p&gt;На большом проекте количество вариантов сценариев измеряется десятками (или даже сотнями) тысяч.
Чтобы проводить релизы несколько раз в день, нам нужны сотни прилежных людей.
Понятно, что такого количества людей мы не найдём.&lt;/p&gt;

&lt;p&gt;На этом шаге команды делятся на 2 типа:&lt;/p&gt;

&lt;p&gt;1) тестируют малую часть функционала &amp;ldquo;вручную&amp;rdquo;;
2) заменяют ручное тестирование автоматическим.&lt;/p&gt;

&lt;h2 id=&#34;тестирование-вручную&#34;&gt;Тестирование вручную&lt;/h2&gt;

&lt;p&gt;Например, в программе 10 вариантов развития событий. Можно ли пройти их вручную?
Наверное, да. При этом:&lt;/p&gt;

&lt;p&gt;1) кейсы должны быть описаны в понятном для сотрудника формате;
2) сотрудник должен понимать, где кейсы хранятся, как их пополнять и удалять ненужные
3) сотрудник должен понимать, как проходить по кейсам (как создать площадку, подобную &amp;ldquo;боевой&amp;rdquo;, откуда брать данные для тестирования и т.д.)&lt;/p&gt;

&lt;h2 id=&#34;запуск-автоматических-тестов-локально&#34;&gt;Запуск автоматических тестов локально&lt;/h2&gt;

&lt;p&gt;Запускаем selenium&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --shm-size=2g --network bridge --name selenium-chrome selenium/standalone-chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Узнаём IP адрес созданного контейнера с selenium&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker inspect selenium-chrome
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Экспортируем переменные окружения&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export SELENIUM_CHROME_ADDRESS=IP адрес контейнера с selenium
export FQDN=адрес веб-сервера
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ставим зависимости&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer install
#если падает с ошибкой отсутствия какой-либо зависимости, можно вызвать с ключиком --ignore-platform-reqs
composer install --ignore-platform-reqs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Запускаем тесты&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./vendor/bin/codecept run
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Нагрузочное тестирование</title>
      <link>https://vitalyzhakov.github.io/post/load-testing/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/load-testing/</guid>
      <description>

&lt;h2 id=&#34;проблематика&#34;&gt;Проблематика&lt;/h2&gt;

&lt;p&gt;Запуск нагрузочного тестирования - довольно длительная процедура.&lt;/p&gt;

&lt;p&gt;Если сервис держит нужное количество пользователей или расширение делалось разовыми изменениями параметров конфигруации,
внедрять нагрузочное тестирование в процесс будет только замедлять Time To Market, но не улучшит вопрос качества.&lt;/p&gt;

&lt;h2 id=&#34;подготовка&#34;&gt;Подготовка&lt;/h2&gt;

&lt;h3 id=&#34;договориться-с-заказчиком-об-sl&#34;&gt;Договориться с заказчиком об SL&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;какое максимальное время ответа на каком сценарии должно быть (с распределением;&lt;/li&gt;
&lt;li&gt;какое количество пользователей должен выдерживать сервис в пиках.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;поправить-все-функциональные-баги&#34;&gt;Поправить все функциональные баги&lt;/h3&gt;

&lt;p&gt;Перед тем, как начинать нагрузочное тестирование, нужно убедиться, что перед этим провели функциональное и поправили все баги. Причем именно на вашем стенде. Удостоверьтесь, что в середине вашей стрельбы к вам на стенд никто не придет, чтобы скачать пару сотен гигабайт. В общем, подготовьте удобное тестовое окружение, в котором вам никто не будет мешать.&lt;/p&gt;

&lt;h2 id=&#34;что-тестировать-в-первую-очередь&#34;&gt;Что тестировать в первую очередь&lt;/h2&gt;

&lt;p&gt;Тестировать в первую очередь надо критический сценарий — то есть тот, который приносит деньги.
И провести как минимум два вида тестов:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;на разладку, чтобы определить пределы производительности&lt;/li&gt;
&lt;li&gt;на измерение таймингов, чтобы убедиться, что сервис укладывается в SLA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;То есть сервис обязательно нужно «добить» и померить тайминги на том уровне нагрузки, который предполагается в продакшн.&lt;/p&gt;

&lt;h2 id=&#34;интерпретация-результатов&#34;&gt;Интерпретация результатов&lt;/h2&gt;

&lt;p&gt;Важно смотреть не только итоговую статистику, но и почему она получилась такой.
Найти, что является узким местом.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
