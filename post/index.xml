<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Инфраструктура ИТ</title>
    <link>https://vitalyzhakov.github.io/post/</link>
    <description>Recent content in Posts on Инфраструктура ИТ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://vitalyzhakov.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Песочница (среда разработки) для веб-разработчиков</title>
      <link>https://vitalyzhakov.github.io/post/sandbox-for-web-developers/</link>
      <pubDate>Mon, 07 May 2018 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/sandbox-for-web-developers/</guid>
      <description>В системе контроля задач создаётся новый элемент с уникальным именем (порядковым номером). В репозитории проекта создаётся ветка с этим именем в нижнем регистре.
Раработчик вносит изменения в код и выполняет push на удалённый сервер. CI-сервер (gitlab) подхватывает это событие и создаёт задание для worker для песочниц.
Конфигурация worker:  много оперативной памяти (из расчёта количество задач в день, над которыми предстоит работать * количество контейнеров * количество потребляемой памяти на контейнер); 100 GB HDD; docker-демон; docker-compose; хостовой nginx для проксирования сайтов; хостовой consul для разрешения имён контейнеров в IP-адреса; скрипты для ночного удаления контейнеров; скрипты для ежедневного удаления песочниц.</description>
    </item>
    
    <item>
      <title>Репликация MySQL-серверов с помощью Docker</title>
      <link>https://vitalyzhakov.github.io/post/mysql-replication-docker/</link>
      <pubDate>Sun, 22 Jan 2017 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/mysql-replication-docker/</guid>
      <description>Репликация MySQL-серверов с помощью Docker До выхода приложения в бой, нужно смоделировать его поведение в тестовой среде.
Технология Docker Swarm позволяет легко масштабировать приложение горизонтально. Но приложению приходится обращаться к серверу баз данных, задача масшабировать который гораздо труднее.
В нашем случае количество запросов на чтение информации гораздо меньше количества изменений (есть подозрение, что так на большинстве веб-проектов). Логичным способом увеличения такого бутылочного горлышка - увеличить количество баз на чтение и настроить приложение таким образом, чтобы большее количество запросов на чтение отправлялось на SLAVE-сервера.</description>
    </item>
    
    <item>
      <title>Примеры использования PostGis расширения в PostgreSQL</title>
      <link>https://vitalyzhakov.github.io/post/postgis-examples/</link>
      <pubDate>Tue, 23 Feb 2016 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/postgis-examples/</guid>
      <description>Здание (полигон), которое содержит точку с координатами $lng, $lat &amp;lt;?php &#39;SELECT * FROM planet_osm_polygon WHERE &#39; . &#39;ST_contains( way, ST_Transform( ST_SetSRID( ST_Point(&#39; . $lng . &#39;,&#39; . $lat . &#39;), 4326&#39; . &#39;), 900913 ) )&#39; . &amp;quot;AND building != &#39;&#39;&amp;quot;  Точки (организации) внутри найденного полигона &#39;SELECT point.* FROM planet_osm_point point, &#39; . &#39;planet_osm_polygon polygon &#39; . &#39;WHERE polygon.osm_id = &#39; . $polygon-&amp;gt;osm_id . &#39; AND ST_Contains (polygon.way, point.</description>
    </item>
    
    <item>
      <title>Импорт данных OpenStreetMap в PostgreSQL средствами osm2pgsql</title>
      <link>https://vitalyzhakov.github.io/post/osm2pgsql/</link>
      <pubDate>Tue, 02 Feb 2016 00:10:06 +0500</pubDate>
      
      <guid>https://vitalyzhakov.github.io/post/osm2pgsql/</guid>
      <description>Импорт данных OpenStreetMap в PostgreSQL средствами osm2pgsql На сайте бывает полезно отобразить географические данные, но простой интеграции с публичными проприетарными сервисами карт может не хватить. На помощь приходят открытые данные, для географических карт - это Openstreet Map.
Требования Действия выполняются на системе
 debian jessie 8.2; PostgreSQL 9.4; osm2pgsql 0.86; пользователь, от которого исполняется скрипт, должен иметь права на запись в целевую базу.  Подготовка базы Создаём БД gis, добавляем расширения postgis и hstore</description>
    </item>
    
  </channel>
</rss>